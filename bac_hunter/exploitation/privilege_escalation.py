from __future__ import annotations
import logging
from typing import Dict, Any, List

from ..config import Settings, Identity
from ..core.http_client import HttpClient
from ..core.storage import Storage

log = logging.getLogger("exploit.privesc")


class PrivilegeEscalationTester:
    ADMIN_ENDPOINTS = [
        "/admin", "/admin/", "/administrator", "/administration",
        "/manage", "/manager", "/control", "/dashboard/admin",
        "/api/admin", "/api/v1/admin", "/api/v2/admin"
    ]

    PRIVILEGE_PARAMS = {
        "role": ["admin", "administrator", "manager", "root"],
        "user_type": ["admin", "administrator", "manager"],
        "is_admin": ["true", "1", "yes"],
        "admin": ["true", "1", "yes"],
        "privilege": ["admin", "high", "elevated"],
        "access_level": ["admin", "full", "complete"]
    }

    def __init__(self, settings: Settings, http: HttpClient, db: Storage):
        self.settings = settings
        self.http = http
        self.db = db

    async def test_admin_endpoints(self, base_url: str, low_priv: Identity) -> List[str]:
        accessible = []
        for endpoint in self.ADMIN_ENDPOINTS:
            test_url = base_url.rstrip('/') + endpoint
            try:
                response = await self.http.get(test_url, headers=low_priv.headers())
                if response.status_code in [200, 201, 206]:
                    if self._looks_like_admin_content(response.content):
                        accessible.append(test_url)
                        self.db.add_finding_for_url(test_url, "privilege_escalation", "Admin endpoint accessible with low privilege", 0.9)
                        log.warning(f"Admin endpoint accessible: {test_url}")
            except Exception as e:
                log.debug(f"Error testing admin endpoint {test_url}: {e}")
                continue
        return accessible

    async def test_parameter_privilege_escalation(self, url: str, identity: Identity) -> List[Dict[str, Any]]:
        findings = []
        try:
            baseline = await self.http.get(url, headers=identity.headers())
            baseline_length = len(baseline.content)
        except Exception:
            return findings
        for param_name, values in self.PRIVILEGE_PARAMS.items():
            for value in values:
                test_url = f"{url}{'&' if '?' in url else '?'}{param_name}={value}"
                try:
                    response = await self.http.get(test_url, headers=identity.headers())
                    if (response.status_code != baseline.status_code or abs(len(response.content) - baseline_length) > 200):
                        finding = {
                            'url': test_url,
                            'parameter': param_name,
                            'value': value,
                            'baseline_status': baseline.status_code,
                            'test_status': response.status_code,
                            'baseline_length': baseline_length,
                            'test_length': len(response.content)
                        }
                        findings.append(finding)
                        self.db.add_finding_for_url(test_url, "parameter_privilege_escalation", f"Parameter {param_name}={value} changed response significantly", 0.8)
                        log.info(f"Potential privilege escalation: {param_name}={value}")
                except Exception as e:
                    log.debug(f"Error testing parameter {param_name}={value}: {e}")
                    continue
        return findings

    def _looks_like_admin_content(self, content: bytes) -> bool:
        if not content:
            return False
        text = content.decode('utf-8', errors='ignore').lower()
        admin_indicators = [
            'admin panel', 'administration', 'dashboard', 'control panel',
            'manage users', 'user management', 'system settings',
            'admin menu', 'administrative', 'backend'
        ]
        return any(indicator in text for indicator in admin_indicators)

