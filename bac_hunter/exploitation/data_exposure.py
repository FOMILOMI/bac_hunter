from __future__ import annotations
import logging
from typing import Dict, List, Set
import json
import re

try:
	from ..config import Settings, Identity
	from ..http_client import HttpClient
	from ..storage import Storage
except Exception:
	from config import Settings, Identity
	from http_client import HttpClient
	from storage import Storage

log = logging.getLogger("exploit.data")

class DataExposureTester:
	"""اختبار تسريب البيانات الحساسة"""
	
	SENSITIVE_PATTERNS = [
		r'\b\d{4}[-\s]?\d{4}[-\s]?\d{4}[-\s]?\d{4}\b',  # Credit cards
		r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b',  # Emails
		r'\b\d{3}-\d{2}-\d{4}\b',  # SSN
		r'\b(?:password|pwd|pass)\s*[:=]\s*[\'\"][^\'\"]+[\'\"]',  # Passwords
		r'\b(?:api[_-]?key|token)\s*[:=]\s*[\'\"][^\'\"]+[\'\"]',  # API Keys
	]
	
	def __init__(self, settings: Settings, http: HttpClient, db: Storage):
		self.settings = settings
		self.http = http
		self.db = db
		self.compiled_patterns = [re.compile(p, re.IGNORECASE) for p in self.SENSITIVE_PATTERNS]
		
	async def test_data_exposure(self, url: str, 
							  identity: Identity) -> Dict[str, List[str]]:
		"""اختبار تسريب البيانات الحساسة"""
		exposures = {'patterns_found': [], 'sensitive_fields': []}
		
		try:
			response = await self.http.get(url, headers=identity.headers())
			
			if response.status_code != 200:
				return exposures
				
			content = response.content.decode('utf-8', errors='ignore')
			
			# فحص الأنماط الحساسة
			for i, pattern in enumerate(self.compiled_patterns):
				matches = pattern.findall(content)
				if matches:
					pattern_name = [
						'credit_card', 'email', 'ssn', 'password', 'api_key'
					][i]
					exposures['patterns_found'].append(f"{pattern_name}: {len(matches)} matches")
					
					self.db.add_finding_for_url(
						url,
						"sensitive_data_exposure",
						f"Sensitive {pattern_name} patterns found in response",
						0.9
					)
					log.warning(f"Sensitive data exposure ({pattern_name}): {url}")
			
			# إذا كان JSON، فحص الحقول الحساسة
			if 'application/json' in response.headers.get('content-type', ''):
				try:
					json_data = json.loads(content)
					sensitive_fields = self._find_sensitive_json_fields(json_data)
					if sensitive_fields:
						exposures['sensitive_fields'] = sensitive_fields
						
						self.db.add_finding_for_url(
							url,
							"sensitive_json_fields",
							f"Sensitive fields in JSON: {', '.join(sensitive_fields)}",
							0.7
						)
						
				except json.JSONDecodeError:
					pass
					
		except Exception as e:
			log.debug(f"Error testing data exposure for {url}: {e}")
			
		return exposures
	
	def _find_sensitive_json_fields(self, data: any, prefix: str = "") -> List[str]:
		"""البحث عن حقول JSON حساسة"""
		sensitive_fields = []
		sensitive_field_names = {
			'password', 'passwd', 'pwd', 'secret', 'token', 'key',
			'ssn', 'social_security', 'credit_card', 'cc_number',
			'api_key', 'private_key', 'auth_token', 'session_id'
		}
		
		if isinstance(data, dict):
			for key, value in data.items():
				current_path = f"{prefix}.{key}" if prefix else key
				
				if key.lower() in sensitive_field_names:
					sensitive_fields.append(current_path)
				
				if isinstance(value, (dict, list)):
					sensitive_fields.extend(
						self._find_sensitive_json_fields(value, current_path)
					)
					
		elif isinstance(data, list) and data:
			sensitive_fields.extend(
				self._find_sensitive_json_fields(data[0], prefix)
			)
			
		return sensitive_fields
