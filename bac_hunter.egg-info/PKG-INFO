Metadata-Version: 2.4
Name: bac-hunter
Version: 2.0.0
Summary: BAC Hunter security testing tool
Requires-Python: >=3.11
Description-Content-Type: text/markdown
Requires-Dist: httpx==0.27.0
Requires-Dist: typer==0.12.3
Requires-Dist: click==8.1.7
Requires-Dist: PyYAML==6.0.1
Requires-Dist: rich==13.7.1
Requires-Dist: fastapi==0.115.0
Requires-Dist: uvicorn[standard]==0.30.6
Requires-Dist: Jinja2==3.1.4
Requires-Dist: weasyprint==62.3

Professional-grade, non-aggressive automation framework for discovering Broken Access Control vulnerabilities. Built with modular architecture, smart rate limiting, unified orchestration, and comprehensive reporting.

### What‚Äôs in this release
- Stable CLI with comprehensive subcommands (recon, scan, access, audit, exploit, smart-auto, orchestrate, dashboard, report, ci, har-replay, db-prune)
- SQLite-backed storage auto-initialized on first run
- Auto-fallbacks for missing external tools (Subfinder, ProjectDiscovery httpx)
- Web dashboard (FastAPI + Uvicorn)
- Unified exporters (HTML/CSV/JSON/SARIF, PDF via WeasyPrint if available)

## üéØ Highlights

- **Smart CLI**: `quickscan`, contextual help, runs without YAML
- **Web Dashboard**: Real-time findings, filtering/sorting/export, trigger scans
- **Auto-Setup Wizard**: `bac_hunter setup` to generate YAMLs with guided questions
- **Integrated Fallback Scanning**: Works even without Nuclei/Dirsearch
- **Intelligent Profiling**: Detect web/API/SPA and auth hints (JWT/Basic/Cookie)
- **Unified Reporting**: HTML/CSV/JSON and PDF (if WeasyPrint installed), with recommendations
- **Modern Deployment**: Docker support for easy, isolated runs

## üöÄ Quick Start

### Installation
```bash
# Python 3.11+ required (tested on Python 3.13)
pip3 install --break-system-packages -r requirements.txt
# Optional (for tests):
pip3 install --break-system-packages pytest
```

### One-Click Smart Auto

Run a near‚Äëzero configuration scan that profiles, performs smart recon, gathers auth intelligence, suggests identities, and runs light access checks:

```bash
python -m bac_hunter smart-auto https://target.com
```

Options:

```bash
python -m bac_hunter smart-auto \
  --mode standard \
  --max-rps 2.0 \
  --identities-yaml identities.yaml \
  --auth-name user https://target.com
```

What it does:
- Profiles target kind/framework/auth hints
- Discovers login/reset/OAuth endpoints and infers session token style
- Suggests synthetic identities (no brute-force)
- Runs differential/IDOR/force-browse on a small sample

### Unified Scans
```bash
# Full pipeline
python -m bac_hunter scan-full https://example.com --mode standard -v 1

# Quick 15-minute assessment
python -m bac_hunter scan-quick https://target.com --mode standard --timeout 15 -v 1

# Custom phase selection
python -m bac_hunter scan-custom https://example.com --phases recon,audit --mode aggressive -v 1
```
‚Äì If you have identities:
```bash
python -m bac_hunter.cli scan-full https://target.com \
  --mode standard --identities-yaml identities.yaml --auth-name user -v 1
```

### Web Dashboard
```bash
python -m bac_hunter dashboard --host 0.0.0.0 --port 8000
# Then open http://localhost:8000/ for the minimal UI, or /docs for API.
```
- Endpoints:
  - GET `/api/stats` ‚Äì runtime stats
  - GET `/api/findings?q=login` ‚Äì list with filtering
  - POST `/api/scan?target=https://target.com` ‚Äì trigger a one-off scan
  - GET `/api/export/{html|csv|json|pdf}` ‚Äì export reports

### Setup Wizard
```bash
python -m bac_hunter setup --out-dir .
# Creates identities.yaml and tasks.yaml with guided Q&A (non-interactive in CI)
```

### Traditional Workflow
- Recon:
```bash
python -m bac_hunter recon https://target.com \
  --max-rps 2 --per-host-rps 1 \
  --proxy http://127.0.0.1:8080 -v 1
```
- Access (diff/IDOR/force-browse):
```bash
python -m bac_hunter access https://target.com \
  --identities-yaml identities.yaml \
  --unauth-name anon --auth-name user \
  --max-rps 2 -v 1
```
- Audit:
```bash
python -m bac_hunter audit https://target.com \
  --identities-yaml identities.yaml \
  --auth-name user --max-rps 2 -v 1
```

### Reporting
```bash
python -m bac_hunter report --output report.html
python -m bac_hunter report --output findings.csv
python -m bac_hunter report --output report.pdf   # needs WeasyPrint, else falls back to HTML
python -m bac_hunter report --output report.sarif # SARIF for CI integrations
```

## ‚úÖ Supported Commands
- `recon`: robots/sitemap/js/smart recon into SQLite
- `scan`: smart recon with optional heuristics
- `smart-auto`: profile -> recon -> auth intel -> light access
- `quickscan` and `scan-quick`: fast defaults for quick assessments
- `scan-custom`, `scan-full`: phased orchestration with mode profiles
- `access`: diff/IDOR/force-browse (non-aggressive)
- `audit`: header/CORS and safe param toggles
- `exploit`: safe privilege escalation and parameter mining
- `har-replay`: compare GETs from HAR across identities
- `report`: HTML/CSV/JSON/SARIF, PDF via WeasyPrint if present
- `dashboard`: FastAPI app with API and minimal UI
- `setup`: generate `identities.yaml` and `tasks.yaml`
- `orchestrate`, `orchestrator-status/pause/resume`: job queue
- `authorize`: PD subfinder + httpx wrapper (graceful if tools missing)
- `ci`: YAML-driven scan with fail threshold
- `db-prune`: prune SQLite size

## üß© Config Files
- `identities.yaml`
  - Example:
    ```yaml
    identities:
      - name: anon
        headers:
          User-Agent: Mozilla/5.0
      - name: user
        headers:
          User-Agent: Mozilla/5.0
        cookie: session=abcd1234; path=/
    ```
- `tasks.yaml`
  - Example:
    ```yaml
    tasks:
      - type: recon
        priority: 0
        params:
          target: https://example.com
          robots: true
          sitemap: true
          js: true
      - type: access
        priority: 1
        params:
          target: https://example.com
          identity_yaml: identities.yaml
          unauth: anon
          auth: user
      - type: audit
        priority: 1
        params:
          target: https://example.com
          auth: user
    ```
- `.bac-hunter.yml` (for `ci`):
  ```yaml
  targets:
    - https://example.com
  identities: identities.yaml
  auth: user
  smart: true
  ```

## üß™ Troubleshooting
- No output on some commands: many subcommands run silently unless findings occur; use `-v 2` for debug logs.
- External tools missing (subfinder/httpx): integration wrappers degrade gracefully; install tools to enable richer results.
- PDF export errors: WeasyPrint relies on system libraries; the exporter falls back to HTML automatically.
- SQLite locked or large: use `db-prune`; rerun with lower RPS.

## üß∞ Known Limitations
- Network-dependent checks may return sparse results against `https://example.com`.
- Orchestrator runs in-foreground; workers auto-exit when queue idle for ~10s.

## üß† Intelligent Target Profiling
- Detects target kind: web / SPA / API from Content-Type and HTML patterns
- Auth hints: `WWW-Authenticate`, `Set-Cookie` for basic/bearer/cookie
- Adjusts fallback scans accordingly

## üèóÔ∏è Docker

Create a Docker image and run in isolation:

```bash
# Build
docker build -t bac-hunter .

# Run CLI quickscan
docker run --rm -it bac-hunter python -m bac_hunter.cli quickscan https://target.com

# Run dashboard (map port)
docker run --rm -p 8000:8000 bac-hunter python -m bac_hunter.cli dashboard --host 0.0.0.0 --port 8000
```

## üìÑ Examples and Templates
- `identities.sample.yaml` and `tasks.sample.yaml` provided
- Setup wizard offers templates for WordPress/Laravel/Node

## ‚ö†Ô∏è Safety and Ethics
- Built for respectful, low-noise scanning; obey robots.txt by default
- Rate limiting enforced by mode; caps cannot be fully disabled
- Automatic stop on excessive error rate
- Confirmation prompt for maximum mode
- Use only on systems you are authorized to test
