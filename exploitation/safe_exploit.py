from __future__ import annotations
import logging
from typing import Dict, List, Optional
import json

from ..config import Settings, Identity
from ..http_client import HttpClient
from ..storage import Storage

log = logging.getLogger("exploit.safe")

class SafeExploiter:
    """محاكاة آمنة ومحدودة لاستغلال الثغرات المكتشفة"""
    
    def __init__(self, settings: Settings, http: HttpClient, db: Storage):
        self.settings = settings
        self.http = http
        self.db = db
        
    async def test_direct_access(self, url: str, low_priv: Identity, 
                               expected_forbidden: bool = True) -> bool:
        """اختبار الوصول المباشر للموارد المحمية"""
        try:
            response = await self.http.get(url, headers=low_priv.headers())
            
            # إذا كنا نتوقع منع الوصول ولكن حصلنا على نجاح
            if expected_forbidden and response.status_code == 200:
                self.db.add_finding_for_url(
                    url, 
                    "direct_access_bypass", 
                    f"Direct access succeeded with low privilege account",
                    0.8
                )
                log.warning(f"Direct access bypass: {url}")
                return True
                
            return False
            
        except Exception as e:
            log.debug(f"Error testing direct access to {url}: {e}")
            return False
            
    async def test_sequential_requests(self, urls: List[str], 
                                     identity: Identity) -> List[str]:
        """اختبار الطلبات المتسلسلة للعمليات متعددة المراحل"""
        exploitable = []
        
        for i, url in enumerate(urls):
            if i == 0:
                continue  # تخطي الطلب الأول
                
            try:
                # محاولة تنفيذ الخطوة الثانية مباشرة بدون الأولى
                response = await self.http.get(url, headers=identity.headers())
                
                if response.status_code in [200, 201, 202]:
                    # قد يكون هناك تجاوز لخطوات التحقق
                    self.db.add_finding_for_url(
                        url,
                        "sequential_bypass",
                        f"Step {i+1} succeeded without previous steps",
                        0.7
                    )
                    exploitable.append(url)
                    log.info(f"Sequential bypass found: {url}")
                    
            except Exception as e:
                log.debug(f"Error in sequential test for {url}: {e}")
                continue
                
        return exploitable

